apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

//正式环境
def API_RELEASE_HOST = "\"https://www.baidu.com/\""
//开发环境
def API_DEV_HOST = "\"https://www.google.com/\""


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "chouray.com.practicekotlin"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 45
        versionName APP_VERSION
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('kotlindemo_keystore.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "BASE_URL", API_RELEASE_HOST)
        }
        debug {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "BASE_URL", API_DEV_HOST)
        }
    }

    //渠道Flavors
    flavorDimensions "tier"
    productFlavors {
        beta {
            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        if (IS_JENKINS) {
            outputFileName = "${variant.name}-${variant.versionName}-${BUILD_TIME}.apk"
        } else {
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }
}

import java.util.regex.Pattern
task('increaseVersionCode') << {
    println("run task increaseVersionCode")
    def buildFile = file("build.gradle")
    def pattern = Pattern.compile("versionCode\\s+(\\d+)")
    def manifestText = buildFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode " + ++versionCode)
    buildFile.write(manifestContent)
}

tasks.whenTaskAdded { task ->
    task.dependsOn 'increaseVersionCode'
}